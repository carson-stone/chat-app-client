
/* eslint-disable max-len, max-lines, @typescript-eslint/naming-convention */

const banned = {
  types: {
    Object : { message: "Use \"object\" instead", fixWith: "object", },
    "{}"   : { message: "Use \"object\" instead", fixWith: "object", },
    String : { message: "Use \"string\" instead", fixWith: "string", },
    Symbol : { message: "Use \"symbol\" instead", fixWith: "symbol", },
    Number : { message: "Use \"number\" instead", fixWith: "number", },
    Boolean: { message: "Use \"boolean\" instead", fixWith: "boolean", },
  },
  unused: {
    args                     : "after-used",
    argsIgnorePattern        : "^_",
    caughtErrors             : "all",
    caughtErrorsIgnorePattern: "^_",
    vars                     : "local",
    varsIgnorePattern        : "^_",
  },
};

const stylistic = {
  casing: [ {
    selector         : "variable",
    types            : [ "function", ],
    format           : [ "strictCamelCase", "snake_case", ],
    leadingUnderscore: "allow",
  }, {
    selector         : "function",
    format           : [ "strictCamelCase", "StrictPascalCase", "snake_case", ],
    leadingUnderscore: "allow",
  }, {
    selector         : "parameter",
    format           : [ "strictCamelCase", "snake_case", ],
    leadingUnderscore: "allow",
  }, {
    selector         : "method",
    format           : [ "strictCamelCase", "StrictPascalCase", "snake_case", ],
    leadingUnderscore: "allow",
  }, {
    selector         : "enumMember",
    format           : [ "UPPER_CASE", ],
    leadingUnderscore: "allow",
  }, {
    selector         : "typeLike",
    format           : [ "StrictPascalCase", ],
    leadingUnderscore: "allow",
  }, ],
  dangle: {
    arrays   : "always",
    exports  : "always-multiline",
    functions: "never",
    imports  : "always-multiline",
    objects  : "always",
  },
  indent: {
    SwitchCase         : 1,
    VariableDeclarator : "first",
    outerIIFEBody      : 1,
    MemberExpression   : 1,
    FunctionDeclaration: {
      body: 1, parameters: 1,
    },
    CallExpression: {
      arguments: 1,
    },
    ArrayExpression         : 1,
    ObjectExpression        : 1,
    ImportDeclaration       : 1,
    flatTernaryExpressions  : false,
    offsetTernaryExpressions: true,
    ignoreComments          : false,
  },
  maxLen: {
    code                  : 80,
    ignoreComments        : true,
    ignoreRegExpLiterals  : true,
    ignoreStrings         : true,
    ignoreTemplateLiterals: true,
    ignoreUrls            : true,
  },
  newline: {
    ObjectExpression : { consistent: true, },
    ObjectPattern    : { consistent: true, },
    ImportDeclaration: { consistent: true, },
    ExportDeclaration: { consistent: true, },
  },
  ordering: [
    "signature",

    "public-static-field",
    "protected-static-field",
    "private-static-field",
    "static-field",

    "public-static-method",
    "protected-static-method",
    "private-static-method",
    "static-method",

    "public-decorated-field",
    "public-instance-field",
    "public-abstract-field",
    "public-field",

    "protected-decorated-field",
    "protected-instance-field",
    "protected-abstract-field",
    "protected-field",

    "private-decorated-field",
    "private-instance-field",
    "private-abstract-field",
    "private-field",

    "decorated-field",
    "instance-field",
    "abstract-field",

    "field",

    // Constructors
    "public-constructor",
    "protected-constructor",
    "private-constructor",

    "constructor",

    "public-decorated-method",
    "public-instance-method",
    "public-abstract-method",
    "public-method",

    "protected-decorated-method",
    "protected-instance-method",
    "protected-abstract-method",
    "protected-method",

    "private-decorated-method",
    "private-instance-method",
    "private-abstract-method",
    "private-method",

    "decorated-method",
    "instance-method",
    "abstract-method",

    "method",
  ],
  padding: [ {
    blankLine: "always",
    prev     : "*",
    next     : [ "class", "return", "function", "do", "for", "if", "iife", "switch", "try", "while", "with", ],
  }, {
    blankLine: "always",
    prev     : [ "class", "directive", "function", "iife", ],
    next     : "*",
  }, {
    blankLine: "always",
    prev     : "*",
    next     : [ "cjs-import", "import", ],
  }, {
    blankLine: "always",
    prev     : [ "cjs-import", "import", ],
    next     : "*",
  }, {
    blankLine: "any",
    prev     : [ "cjs-import", "import", ],
    next     : [ "cjs-import", "import", ],
  }, {
    blankLine: "always",
    prev     : [ "const", "let", "var", ],
    next     : "*",
  }, {
    blankLine: "any",
    prev     : [ "const", "let", "var", ],
    next     : [ "const", "let", "var", ],
  }, ],
  spacing: {
    afterColon: true,
    align     : {
      afterColon : true,
      beforeColon: false,
      on         : "colon",
    },
    beforeColon: false,
    mode       : "minimum",
  },
};

const { types: bannedTypes, unused: bannedUnused, } = banned;
const { casing, dangle, indent, maxLen, newline, ordering, padding, spacing, } = stylistic;

const baseline = {
  "@typescript-eslint/ban-ts-comment"                     : [ 0, ],
  "@typescript-eslint/ban-tslint-comment"                 : [ 2, ],
  "@typescript-eslint/ban-types"                          : [ 2, { extendDefaults: false, types: bannedTypes, }, ],
  "@typescript-eslint/brace-style"                        : [ 2, "1tbs", { allowSingleLine: true, }, ],
  "@typescript-eslint/class-literal-property-style"       : [ 0, ], // Useful for re-typing
  "@typescript-eslint/consistent-indexed-object-style"    : [ 0, ],
  "@typescript-eslint/consistent-type-assertions"         : [ 0, ],
  "@typescript-eslint/default-param-last"                 : [ 2, ],
  "@typescript-eslint/explicit-function-return-type"      : [ 0, ],
  "@typescript-eslint/explicit-module-boundary-types"     : [ 0, ],
  "@typescript-eslint/func-call-spacing"                  : [ 2, "never", ],
  "@typescript-eslint/init-declarations"                  : [ 2, "always", ],
  "@typescript-eslint/keyword-spacing"                    : [ 2, { after: true, before: true, }, ],
  "@typescript-eslint/lines-between-class-members"        : [ 2, "always", { exceptAfterOverload: true, exceptAfterSingleLine: true, }, ],
  "@typescript-eslint/member-delimiter-style"             : [ 2, { multiline: { delimiter: "semi", requireLast: true, }, singleline: { delimiter: "semi", requireLast: true, }, }, ],
  "@typescript-eslint/member-ordering"                    : [ 2, { default: ordering, }, ], // Fails for overloading
  "@typescript-eslint/method-signature-style"             : [ 2, "method", ],
  "@typescript-eslint/no-array-constructor"               : [ 0, ],
  "@typescript-eslint/no-confusing-non-null-assertion"    : [ 2, ],
  "@typescript-eslint/no-dupe-class-members"              : [ 2, ],
  "@typescript-eslint/no-dynamic-delete"                  : [ 0, ],
  "@typescript-eslint/no-empty-function"                  : [ 2, { allow: [ "private-constructors", "protected-constructors", ], }, ],
  "@typescript-eslint/no-empty-interface"                 : [ 0, ],
  "@typescript-eslint/no-explicit-any"                    : [ 2, { fixToUnknown: true, ignoreRestArgs: true, }, ],
  "@typescript-eslint/no-extra-non-null-assertion"        : [ 2, ],
  "@typescript-eslint/no-extra-parens"                    : [ 0, ],
  "@typescript-eslint/no-extra-semi"                      : [ 2, ],
  "@typescript-eslint/no-extraneous-class"                : [ 0, ],
  "@typescript-eslint/no-for-in-array"                    : [ 0, ],
  "@typescript-eslint/no-implied-eval"                    : [ 0, ],
  "@typescript-eslint/no-inferrable-types"                : [ 0, ],
  "@typescript-eslint/no-invalid-this"                    : [ 0, ],
  "@typescript-eslint/no-invalid-void-type"               : [ 2, { allowInGenericTypeArguments: true, }, ], // Fails to accurately determine `this` usage
  "@typescript-eslint/no-magic-numbers"                   : [ 0, ],
  "@typescript-eslint/no-misused-new"                     : [ 2, ],
  "@typescript-eslint/no-namespace"                       : [ 0, ],
  "@typescript-eslint/no-non-null-asserted-optional-chain": [ 2, ],
  "@typescript-eslint/no-non-null-assertion"              : [ 0, ],
  "@typescript-eslint/no-parameter-properties"            : [ 2, ],
  "@typescript-eslint/no-require-imports"                 : [ 0, ],
  "@typescript-eslint/no-this-alias"                      : [ 2, { allowDestructuring: true, allowedNames: [], }, ],
  "@typescript-eslint/no-type-alias"                      : [ 0, ], // Fails on keyof unions
  "@typescript-eslint/no-unnecessary-condition"           : [ 0, ], // Fails on Record objects
  "@typescript-eslint/no-unsafe-assignment"               : [ 0, ],
  "@typescript-eslint/no-unsafe-call"                     : [ 0, ],
  "@typescript-eslint/no-unsafe-member-access"            : [ 0, ],
  "@typescript-eslint/no-unsafe-return"                   : [ 0, ],
  "@typescript-eslint/no-var-requires"                    : [ 0, ],
  "@typescript-eslint/prefer-as-const"                    : [ 2, ],
  "@typescript-eslint/prefer-enum-initializers"           : [ 0, ],
  "@typescript-eslint/prefer-for-of"                      : [ 2, ],
  "@typescript-eslint/prefer-function-type"               : [ 2, ],
  "@typescript-eslint/prefer-literal-enum-member"         : [ 0, ],
  "@typescript-eslint/prefer-namespace-keyword"           : [ 2, ],
  "@typescript-eslint/prefer-nullish-coalescing"          : [ 0, ],
  "@typescript-eslint/prefer-optional-chain"              : [ 2, ],
  "@typescript-eslint/prefer-readonly-parameter-types"    : [ 0, ], // Fails on imported types
  "@typescript-eslint/prefer-string-starts-ends-with"     : [ 0, ],
  "@typescript-eslint/prefer-ts-expect-error"             : [ 2, ],
  "@typescript-eslint/require-await"                      : [ 0, ],
  "@typescript-eslint/restrict-plus-operands"             : [ 0, ],
  "@typescript-eslint/restrict-template-expressions"      : [ 0, ],
  "@typescript-eslint/strict-boolean-expressions"         : [ 0, ],
  "@typescript-eslint/triple-slash-reference"             : [ 0, ],
  "@typescript-eslint/type-annotation-spacing"            : [ 2, { after: true, before: false, overrides: { arrow: { after: true, before: true, }, }, }, ],
  "@typescript-eslint/unbound-method"                     : [ 0, ],
  "@typescript-eslint/unified-signatures"                 : [ 2, ],
  "accessor-pairs"                                        : [ 0, ],
  "array-bracket-newline"                                 : [ 2, "consistent", ],
  "array-bracket-spacing"                                 : [ 2, "always", ],
  "array-callback-return"                                 : [ 2, { allowImplicit: false, checkForEach: true, }, ],
  "array-element-newline"                                 : [ 2, "consistent", ],
  "arrow-body-style"                                      : [ 2, "always", ],
  "arrow-parens"                                          : [ 2, "always", ],
  "arrow-spacing"                                         : [ 2, { after: true, before: true, }, ],
  "block-scoped-var"                                      : [ 2, ],
  "block-spacing"                                         : [ 2, "always", ],
  "brace-style"                                           : [ 0, "1tbs", { allowSingleLine: true, }, ],
  camelcase                                               : [ 0, { ignoreDestructuring: false, ignoreGlobals: false, ignoreImports: false, properties: "always", }, ],
  "capitalized-comments"                                  : [ 0, ],
  "class-methods-use-this"                                : [ 0, ],
  "comma-dangle"                                          : [ 2, dangle, ],
  "comma-spacing"                                         : [ 2, { after: true, before: false, }, ],
  "comma-style"                                           : [ 2, "last", ],
  complexity                                              : [ 2, { max: 12, }, ],
  "computed-property-spacing"                             : [ 2, "never", { enforceForClassMembers: true, }, ],
  "consistent-return"                                     : [ 0, ],
  "consistent-this"                                       : [ 2, "that", ],
  "constructor-super"                                     : [ 2, ], // Fails on return undefined
  curly                                                   : [ 2, "all", ],
  "default-case"                                          : [ 2, { commentPattern: "^no default$", }, ],
  "default-case-last"                                     : [ 2, ],
  "default-param-last"                                    : [ 0, ],
  "dot-location"                                          : [ 2, "property", ],
  "dot-notation"                                          : [ 0, { allowKeywords: true, }, ],
  "eol-last"                                              : [ 2, "always", ],
  eqeqeq                                                  : [ 2, "always", { null: "ignore", }, ],
  "for-direction"                                         : [ 2, ],
  "func-call-spacing"                                     : [ 0, "never", ],
  "func-name-matching"                                    : [ 0, ], // Fails for properties, should only consider vars
  "func-names"                                            : [ 2, "as-needed", { generators: "as-needed", }, ],
  "func-style"                                            : [ 2, "declaration", { allowArrowFunctions: true, }, ],
  "function-call-argument-newline"                        : [ 0, ],
  "function-paren-newline"                                : [ 2, "consistent", ],
  "generator-star-spacing"                                : [ 2, { after: true, before: false, }, ],
  "getter-return"                                         : [ 2, { allowImplicit: false, }, ],
  "grouped-accessor-pairs"                                : [ 2, "getBeforeSet", ],
  "guard-for-in"                                          : [ 0, ],
  "id-denylist"                                           : [ 0, ],
  "id-length"                                             : [ 0, ],
  "id-match"                                              : [ 0, ],
  "implicit-arrow-linebreak"                              : [ 2, "beside", ],
  indent                                                  : [ 2, 2, indent, ],
  "init-declarations"                                     : [ 0, "always", ],
  "jsx-quotes"                                            : [ 2, "prefer-double", ],
  "key-spacing"                                           : [ 2, spacing, ],
  "keyword-spacing"                                       : [ 0, { after: true, before: true, }, ],
  "line-comment-position"                                 : [ 0, ],
  "linebreak-style"                                       : [ 2, "unix", ],
  "lines-around-comment"                                  : [ 0, ],
  "lines-between-class-members"                           : [ 0, "always", { exceptAfterSingleLine: true, }, ],
  "max-classes-per-file"                                  : [ 0, ],
  "max-depth"                                             : [ 0, ],
  "max-len"                                               : [ 2, maxLen, ],
  "max-lines"                                             : [ 2, { max: 196, skipBlankLines: true, skipComments: true, }, ],
  "max-lines-per-function"                                : [ 2, { IIFEs: true, max: 32, skipBlankLines: true, skipComments: true, }, ],
  "max-nested-callbacks"                                  : [ 0, ],
  "max-params"                                            : [ 0, ],
  "max-statements"                                        : [ 2, { max: 32, }, { ignoreTopLevelFunctions: false, }, ],
  "max-statements-per-line"                               : [ 0, ],
  "multiline-comment-style"                               : [ 0, ],
  "multiline-ternary"                                     : [ 0, ],
  "new-cap"                                               : [ 0, ], // Fails to account for library usage
  "new-parens"                                            : [ 2, "always", ],
  "newline-per-chained-call"                              : [ 0, ],
  "no-alert"                                              : [ 2, ],
  "no-array-constructor"                                  : [ 0, ],
  "no-async-promise-executor"                             : [ 2, ],
  "no-await-in-loop"                                      : [ 0, ],
  "no-bitwise"                                            : [ 0, ],
  "no-caller"                                             : [ 2, ],
  "no-case-declarations"                                  : [ 2, ],
  "no-class-assign"                                       : [ 2, ],
  "no-compare-neg-zero"                                   : [ 2, ],
  "no-cond-assign"                                        : [ 2, "except-parens", ],
  "no-confusing-arrow"                                    : [ 0, ],
  "no-console"                                            : [ 2, ],
  "no-const-assign"                                       : [ 2, ],
  "no-constant-condition"                                 : [ 0, ],
  "no-constructor-return"                                 : [ 0, ],
  "no-continue"                                           : [ 0, ], // Fails on records
  "no-control-regex"                                      : [ 0, ],
  "no-debugger"                                           : [ 2, ],
  "no-delete-var"                                         : [ 2, ],
  "no-div-regex"                                          : [ 2, ],
  "no-dupe-args"                                          : [ 2, ],
  "no-dupe-class-members"                                 : [ 0, ],
  "no-dupe-else-if"                                       : [ 2, ],
  "no-dupe-keys"                                          : [ 2, ],
  "no-duplicate-case"                                     : [ 2, ],
  "no-duplicate-imports"                                  : [ 2, { includeExports: true, }, ],
  "no-else-return"                                        : [ 2, { allowElseIf: true, }, ],
  "no-empty"                                              : [ 2, { allowEmptyCatch: false, }, ],
  "no-empty-character-class"                              : [ 2, ],
  "no-empty-function"                                     : [ 0, { allow: [], }, ],
  "no-empty-pattern"                                      : [ 2, ],
  "no-eq-null"                                            : [ 0, ],
  "no-eval"                                               : [ 2, { allowIndirect: false, }, ],
  "no-ex-assign"                                          : [ 2, ],
  "no-extend-native"                                      : [ 0, ],
  "no-extra-bind"                                         : [ 2, ],
  "no-extra-boolean-cast"                                 : [ 2, { enforceForLogicalOperands: true, }, ],
  "no-extra-label"                                        : [ 2, ],
  "no-extra-parens"                                       : [ 0, ],
  "no-extra-semi"                                         : [ 0, ],
  "no-fallthrough"                                        : [ 2, { commentPattern: "^\\sfalls?\\s?(through)?", }, ],
  "no-floating-decimal"                                   : [ 2, ],
  "no-func-assign"                                        : [ 2, ],
  "no-global-assign"                                      : [ 2, { exceptions: [], }, ],
  "no-implicit-coercion"                                  : [ 0, ],
  "no-implicit-globals"                                   : [ 2, ],
  "no-implied-eval"                                       : [ 0, ],
  "no-import-assign"                                      : [ 2, ],
  "no-inline-comments"                                    : [ 0, ],
  "no-inner-declarations"                                 : [ 0, ], // Fails at type inference
  "no-invalid-regexp"                                     : [ 2, { allowConstructorFlags: [ "u", "y", ], }, ],
  "no-invalid-this"                                       : [ 0, ],
  "no-irregular-whitespace"                               : [ 2, { skipComments: false, skipRegExps: true, skipStrings: true, skipTemplates: true, }, ],
  "no-iterator"                                           : [ 2, ],
  "no-label-var"                                          : [ 2, ],
  "no-labels"                                             : [ 0, ],
  "no-lone-blocks"                                        : [ 2, ],
  "no-lonely-if"                                          : [ 2, ],
  "no-loop-func"                                          : [ 2, ],
  "no-loss-of-precision"                                  : [ 2, ],
  "no-magic-numbers"                                      : [ 0, ],
  "no-misleading-character-class"                         : [ 2, ],
  "no-mixed-operators"                                    : [ 2, { allowSamePrecedence: true, }, ],
  "no-mixed-spaces-and-tabs"                              : [ 2, ],
  "no-multi-assign"                                       : [ 0, ],
  "no-multi-spaces"                                       : [ 2, { exceptions: {}, ignoreEOLComments: true, }, ],
  "no-multi-str"                                          : [ 2, ],
  "no-multiple-empty-lines"                               : [ 2, { max: 1, maxBOF: 1, maxEOF: 0, }, ],
  "no-negated-condition"                                  : [ 0, ],
  "no-nested-ternary"                                     : [ 0, ],
  "no-new"                                                : [ 2, ],
  "no-new-func"                                           : [ 0, ],
  "no-new-object"                                         : [ 2, ],
  "no-new-symbol"                                         : [ 2, ],
  "no-new-wrappers"                                       : [ 2, ],
  "no-obj-calls"                                          : [ 2, ],
  "no-octal"                                              : [ 0, ],
  "no-octal-escape"                                       : [ 0, ],
  "no-param-reassign"                                     : [ 0, ],
  "no-plusplus"                                           : [ 0, ],
  "no-promise-executor-return"                            : [ 2, ],
  "no-proto"                                              : [ 2, ],
  "no-prototype-builtins"                                 : [ 0, ],
  "no-redeclare"                                          : [ 2, { builtinGlobals: true, }, ],
  "no-regex-spaces"                                       : [ 2, ],
  "no-restricted-exports"                                 : [ 0, ],
  "no-restricted-globals"                                 : [ 2, { message: "Use local parameter instead.", name: "event", }, ],
  "no-restricted-imports"                                 : [ 0, ],
  "no-restricted-properties"                              : [ 0, ],
  "no-restricted-syntax"                                  : [ 0, ],
  "no-return-assign"                                      : [ 2, "except-parens", ],
  "no-return-await"                                       : [ 2, ],
  "no-script-url"                                         : [ 2, ],
  "no-self-assign"                                        : [ 2, { props: true, }, ],
  "no-self-compare"                                       : [ 2, ],
  "no-sequences"                                          : [ 0, ],
  "no-setter-return"                                      : [ 2, ],
  "no-shadow"                                             : [ 2, { allow: [], builtinGlobals: false, hoist: "functions", }, ],
  "no-shadow-restricted-names"                            : [ 2, ],
  "no-sparse-arrays"                                      : [ 2, ],
  "no-tabs"                                               : [ 2, { allowIndentationTabs: false, }, ],
  "no-template-curly-in-string"                           : [ 0, ],
  "no-ternary"                                            : [ 0, ],
  "no-this-before-super"                                  : [ 2, ],
  "no-throw-literal"                                      : [ 2, ],
  "no-trailing-spaces"                                    : [ 2, { ignoreComments: false, skipBlankLines: false, }, ],
  "no-undef"                                              : [ 2, { typeof: false, }, ], // Fails on typescript scope
  "no-undef-init"                                         : [ 2, ],
  "no-undefined"                                          : [ 0, ],
  "no-underscore-dangle"                                  : [ 0, ],
  "no-unexpected-multiline"                               : [ 2, ],
  "no-unmodified-loop-condition"                          : [ 2, ],
  "no-unneeded-ternary"                                   : [ 2, { defaultAssignment: false, }, ],
  "no-unreachable"                                        : [ 2, ],
  "no-unreachable-loop"                                   : [ 2, { ignore: [], }, ],
  "no-unsafe-finally"                                     : [ 2, ],
  "no-unsafe-negation"                                    : [ 2, { enforceForOrderingRelations: true, }, ],
  "no-unused-expressions"                                 : [ 2, { allowShortCircuit: true, allowTaggedTemplates: false, allowTernary: true, }, ],
  "no-unused-labels"                                      : [ 2, ],
  "no-unused-vars"                                        : [ 2, bannedUnused, ],
  "no-use-before-define"                                  : [ 2, "nofunc", ],
  "no-useless-backreference"                              : [ 2, ],
  "no-useless-call"                                       : [ 0, ],
  "no-useless-catch"                                      : [ 2, ],
  "no-useless-computed-key"                               : [ 2, { enforceForClassMembers: true, }, ],
  "no-useless-concat"                                     : [ 2, ],
  "no-useless-constructor"                                : [ 2, ],
  "no-useless-escape"                                     : [ 2, ],
  "no-useless-rename"                                     : [ 2, ],
  "no-useless-return"                                     : [ 2, ],
  "no-var"                                                : [ 2, ],
  "no-void"                                               : [ 0, ],
  "no-warning-comments"                                   : [ 2, { location: "start", terms: [ "fix", "fixme", "xxx", ], }, ],
  "no-whitespace-before-property"                         : [ 2, ],
  "no-with"                                               : [ 0, ],
  "nonblock-statement-body-position"                      : [ 2, "beside", ],
  "object-curly-newline"                                  : [ 2, newline, ],
  "object-curly-spacing"                                  : [ 2, "always", ],
  "object-property-newline"                               : [ 2, { allowAllPropertiesOnSameLine: true, }, ],
  "object-shorthand"                                      : [ 2, "always", ],
  "one-var"                                               : [ 2, "never", ],
  "one-var-declaration-per-line"                          : [ 2, "always", ],
  "operator-assignment"                                   : [ 2, "always", ],
  "operator-linebreak"                                    : [ 2, "after", { overrides: { ":": "before", "?": "before", }, }, ],
  "padded-blocks"                                         : [ 2, { blocks: "never", classes: "always", switches: "never", }, { allowSingleLineBlocks: true, }, ],
  "padding-line-between-statements"                       : [ 2, ...padding, ],
  "prefer-arrow-callback"                                 : [ 0, ],
  "prefer-const"                                          : [ 2, { destructuring: "any", ignoreReadBeforeAssign: false, }, ],
  "prefer-destructuring"                                  : [ 2, { AssignmentExpression: { array: false, object: false, }, VariableDeclarator: { array: true, object: false, }, }, { enforceForRenamedProperties: true, }, ],
  "prefer-exponentiation-operator"                        : [ 2, ],
  "prefer-named-capture-group"                            : [ 0, ],
  "prefer-numeric-literals"                               : [ 2, ],
  "prefer-object-spread"                                  : [ 2, ],
  "prefer-promise-reject-errors"                          : [ 2, { allowEmptyReject: true, }, ],
  "prefer-regex-literals"                                 : [ 2, { disallowRedundantWrapping: true, }, ],
  "prefer-rest-params"                                    : [ 0, ],
  "prefer-spread"                                         : [ 0, ],
  "prefer-template"                                       : [ 2, ],
  "quote-props"                                           : [ 2, "as-needed", ],
  quotes                                                  : [ 2, "double", { allowTemplateLiterals: true, avoidEscape: false, }, ],
  radix                                                   : [ 2, "always", ],
  "require-atomic-updates"                                : [ 2, ],
  "require-await"                                         : [ 0, ],
  "require-unicode-regexp"                                : [ 2, ],
  "require-yield"                                         : [ 2, ],
  "rest-spread-spacing"                                   : [ 2, "never", ],
  semi                                                    : [ 1, "always", { omitLastInOneLineBlock: false, }, ],
  "semi-spacing"                                          : [ 2, { after: true, before: false, }, ],
  "semi-style"                                            : [ 2, "last", ],
  "sort-imports"                                          : [ 2, { allowSeparatedGroups: true, ignoreCase: false, ignoreDeclarationSort: false, ignoreMemberSort: false, memberSyntaxSortOrder: [ "none", "all", "single", "multiple", ], }, ],
  "sort-keys"                                             : [ 0, ],
  "sort-vars"                                             : [ 0, ], // Fails to respect necessary order
  "space-before-blocks"                                   : [ 2, "always", ],
  "space-before-function-paren"                           : [ 2, "always", ],
  "space-in-parens"                                       : [ 0, ], // Fails for typescript function definitions
  "space-infix-ops"                                       : [ 2, { int32Hint: false, }, ],
  "space-unary-ops"                                       : [ 2, { nonwords: false, words: true, }, ],
  "spaced-comment"                                        : [ 2, "always", { block: { balanced: true, }, }, ],
  strict                                                  : [ 2, "never", ],
  "switch-colon-spacing"                                  : [ 2, { after: true, before: false, }, ],
  "symbol-description"                                    : [ 2, ],
  "template-curly-spacing"                                : [ 2, "never", ],
  "template-tag-spacing"                                  : [ 2, "never", ],
  "unicode-bom"                                           : [ 2, "never", ],
  "use-isnan"                                             : [ 2, { enforceForIndexOf: true, enforceForSwitchCase: true, }, ],
  "valid-typeof"                                          : [ 2, ],
  "vars-on-top"                                           : [ 2, ],
  "wrap-iife"                                             : [ 2, "inside", { functionPrototypeMethods: true, }, ],
  "wrap-regex"                                            : [ 2, ],
  "yield-star-spacing"                                    : [ 2, "after", ],
  yoda                                                    : [ 2, "always", ],
};

const overrides = [ {
  files        : [ "*.ts", ],
  parser       : require.resolve("@typescript-eslint/parser"),
  parserOptions: {
    project    : "./tsconfig.json",
    ecmaVersion: 2020,
    sourceType : "module",
  },
  plugins: [ "@typescript-eslint/eslint-plugin", ],
  rules  : {
    "@typescript-eslint/adjacent-overload-signatures"          : [ 2, ],
    "@typescript-eslint/array-type"                            : [ 2, { default: "generic", readonly: "generic", }, ],
    "@typescript-eslint/await-thenable"                        : [ 2, ],
    "@typescript-eslint/ban-ts-comment"                        : [ 2, { "ts-check": "allow-with-description", "ts-expect-error": "allow-with-description", "ts-ignore": "allow-with-description", "ts-nocheck": "allow-with-description", }, ],
    "@typescript-eslint/comma-dangle"                          : [ 2, { ...dangle, enums: "always-multiline", generics: "never", tuples: "never", }, ],
    "@typescript-eslint/comma-spacing"                         : [ 2, { after: true, before: false, }, ],
    "@typescript-eslint/consistent-type-definitions"           : [ 2, "interface", ],
    "@typescript-eslint/consistent-type-imports"               : [ 2, { disallowTypeAnnotations: true, prefer: "type-imports", }, ],
    "@typescript-eslint/dot-notation"                          : [ 2, { allowKeywords: true, allowPrivateClassPropertyAccess: false, }, ],
    "@typescript-eslint/explicit-member-accessibility"         : [ 2, { accessibility: "explicit", }, ],
    "@typescript-eslint/naming-convention"                     : [ 2, ...casing, ],
    "@typescript-eslint/no-base-to-string"                     : [ 2, ],
    "@typescript-eslint/no-confusing-void-expression"          : [ 2, { ignoreArrowShorthand: false, ignoreVoidOperator: true, }, ],
    "@typescript-eslint/no-duplicate-imports"                  : [ 2, { includeExports: true, }, ],
    "@typescript-eslint/no-floating-promises"                  : [ 2, { ignoreIIFE: false, ignoreVoid: true, }, ],
    "@typescript-eslint/no-implicit-any-catch"                 : [ 2, { allowExplicitAny: false, }, ],
    "@typescript-eslint/no-loop-func"                          : [ 2, ],
    "@typescript-eslint/no-loss-of-precision"                  : [ 2, ],
    "@typescript-eslint/no-misused-promises"                   : [ 2, { checksConditionals: true, checksVoidReturn: true, }, ],
    "@typescript-eslint/no-redeclare"                          : [ 2, { builtinGlobals: true, ignoreDeclarationMerge: true, }, ],
    "@typescript-eslint/no-require-imports"                    : [ 2, ],
    "@typescript-eslint/no-shadow"                             : [ 2, { allow: [], builtinGlobals: false, hoist: "functions", ignoreFunctionTypeParameterNameValueShadow: true, ignoreTypeValueShadow: false, }, ],
    "@typescript-eslint/no-throw-literal"                      : [ 2, ],
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": [ 2, { allowComparingNullableBooleansToFalse: true, allowComparingNullableBooleansToTrue: true, }, ],
    "@typescript-eslint/no-unnecessary-qualifier"              : [ 2, ],
    "@typescript-eslint/no-unnecessary-type-arguments"         : [ 2, ],
    "@typescript-eslint/no-unnecessary-type-assertion"         : [ 2, ],
    "@typescript-eslint/no-unnecessary-type-constraint"        : [ 2, ],
    "@typescript-eslint/no-unused-expressions"                 : [ 2, { allowShortCircuit: true, allowTaggedTemplates: false, allowTernary: true, }, ],
    "@typescript-eslint/no-unused-vars"                        : [ 2, bannedUnused, ],
    "@typescript-eslint/no-use-before-define"                  : [ 2, "nofunc", ],
    "@typescript-eslint/no-useless-constructor"                : [ 2, ],
    "@typescript-eslint/no-var-requires"                       : [ 2, ],
    "@typescript-eslint/prefer-includes"                       : [ 2, ],
    "@typescript-eslint/prefer-readonly"                       : [ 2, { onlyInlineLambdas: false, }, ],
    "@typescript-eslint/prefer-reduce-type-parameter"          : [ 2, ],
    "@typescript-eslint/prefer-regexp-exec"                    : [ 2, ],
    "@typescript-eslint/promise-function-async"                : [ 2, { allowAny: true, checkArrowFunctions: true, checkFunctionDeclarations: true, checkFunctionExpressions: true, checkMethodDeclarations: true, }, ],
    "@typescript-eslint/quotes"                                : [ 2, "double", { allowTemplateLiterals: true, avoidEscape: false, }, ],
    "@typescript-eslint/require-array-sort-compare"            : [ 2, { ignoreStringArrays: true, }, ],
    "@typescript-eslint/return-await"                          : [ 2, "in-try-catch", ],
    "@typescript-eslint/semi"                                  : [ 2, "always", { omitLastInOneLineBlock: false, }, ],
    "@typescript-eslint/space-before-function-paren"           : [ 2, "always", ],
    "@typescript-eslint/space-infix-ops"                       : [ 2, { int32Hint: false, }, ],
    "@typescript-eslint/switch-exhaustiveness-check"           : [ 2, ],
    "@typescript-eslint/typedef"                               : [ 0, ],
    "comma-dangle"                                             : [ 0, ],
    "comma-spacing"                                            : [ 0, ],
    "no-duplicate-imports"                                     : [ 0, ],
    "no-loop-func"                                             : [ 0, ],
    "no-loss-of-precision"                                     : [ 0, ],
    "no-redeclare"                                             : [ 0, ],
    "no-shadow"                                                : [ 0, ],
    "no-throw-literal"                                         : [ 0, ],
    "no-undef"                                                 : [ 0, ],
    "no-unused-expressions"                                    : [ 0, ],
    "no-unused-vars"                                           : [ 0, ],
    "no-use-before-define"                                     : [ 0, ],
    "no-useless-constructor"                                   : [ 0, ],
    quotes                                                     : [ 0, ],
    "return-await"                                             : [ 0, ],
    semi                                                       : [ 0, ],
    "space-before-function-paren"                              : [ 0, ],
    "space-infix-ops"                                          : [ 0, ],
  },
}, ];

module.exports = {
  env      : { browser: true, commonjs: true, es2020: true, },
  rules    : baseline,
  overrides: [
    ...overrides, {
      files        : [ "*.vue", ],
      parser       : require.resolve("vue-eslint-parser"),
      parserOptions: {
        parser             : require.resolve("@typescript-eslint/parser"),
        project            : "./tsconfig.json",
        ecmaVersion        : 2020,
        sourceType         : "module",
        extraFileExtensions: [ ".vue", ],
      },
      plugins: [
        "@typescript-eslint/eslint-plugin",
        "eslint-plugin-vue",
      ],
    },
  ],
};
